name: Reusable • Build & Deploy MkDocs to Pages

on:
  workflow_call:
    inputs:
      python_version:
        type: string
        default: "3.12"
      publish_dir:
        type: string
        default: "site"
      # CSV items: repo:path_in_repo:dest_subdir
      # example: "simutrador-data-manager:docs:data-manager"
      aggregate_docs:
        type: string
        default: ""
    secrets:
      # Optional PAT with repo read; only needed if GITHUB_TOKEN can't read source repos
      GH_TOKEN:
        required: false

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout caller repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v3

      - name: Install deps
        run: uv sync

      - name: Aggregate docs from other repos (optional)
        if: ${{ inputs.aggregate_docs != '' }}
        env:
          AGG: ${{ inputs.aggregate_docs }}
          ORG: ${{ github.repository_owner }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          mkdir -p docs/projects _external
          IFS=',' read -ra ITEMS <<< "$AGG"
          for item in "${ITEMS[@]}"; do
            item="$(echo "$item" | xargs)"  # trim spaces

            # Split: repo : src : dest_sub
            REPO_RAW="${item%%:*}"; REST="${item#*:}"
            SRC_RAW="${REST%%:*}";  DEST_SUB_RAW="${REST#*:}"
            REPO="$(echo "$REPO_RAW" | xargs)"
            SRC="$(echo "$SRC_RAW" | xargs)"
            DEST_SUB="$(echo "$DEST_SUB_RAW" | xargs)"

            DEST_DIR="docs/projects/${DEST_SUB}"
            echo "::group::Clone and copy: $REPO | $SRC -> $DEST_DIR"
            mkdir -p "_external/$REPO" "$DEST_DIR"

            # Clone once
            if [ ! -d "_external/$REPO/.git" ]; then
              gh repo clone "$ORG/$REPO" "_external/$REPO" -- --depth 1
            fi

            if [ -d "_external/$REPO/$SRC" ]; then
              # Directory -> mirror into DEST_DIR/
              rsync -a --delete "_external/$REPO/$SRC/" "$DEST_DIR/"
            elif [ -f "_external/$REPO/$SRC" ]; then
              # Single file -> copy into DEST_DIR/
              cp "_external/$REPO/$SRC" "$DEST_DIR/"
              # README -> index for section landing pages
              if [ "$(basename "$SRC")" = "README.md" ] && [ ! -f "$DEST_DIR/index.md" ]; then
                mv "$DEST_DIR/README.md" "$DEST_DIR/index.md"
              fi
            else
              echo "WARN: path '$SRC' not found in $REPO" >&2
            fi

            echo "Resulting files in $DEST_DIR:"
            ls -la "$DEST_DIR" || true
            echo "::endgroup::"
          done

      - name: Normalize aggregated content (README → index)
        run: |
          set -euo pipefail
          shopt -s nullglob
          # Any README.md becomes index.md if index doesn't exist (makes dir links work)
          while IFS= read -r -d '' f; do
            d="$(dirname "$f")"
            if [ ! -f "$d/index.md" ]; then
              mv "$f" "$d/index.md"
              echo "Renamed: $f -> $d/index.md"
            fi
          done < <(find docs/projects -type f -name 'README.md' -print0)

      - name: Fix links inside aggregated /docs subtrees
        run: |
          set -euo pipefail
          shopt -s nullglob
          # For each .../docs subtree:
          for DOCS_DIR in docs/projects/*/docs; do
            # 1) Strip leading 'docs/' in links when already under /docs
            find "$DOCS_DIR" -type f -name '*.md' -print0 \
              | xargs -0 perl -0777 -pe 's/\((\s*)docs\//\(\1/g' -i
            # 2) Point to section roots: ../frontend/ -> ../frontend/index.md, ../backend/ -> ../backend/index.md
            find "$DOCS_DIR" -type f -name '*.md' -print0 \
              | xargs -0 perl -0777 -pe 's/\((\s*)\.\.\/frontend\/\)/(\1..\/frontend\/index.md)/g; s/\((\s*)\.\.\/backend\/\)/(\1..\/backend\/index.md)/g' -i
          done

      - name: Fix cross-section links in section homepages (root-level)
        run: |
          set -euo pipefail
          # Your root section page for Data Manager
          if [ -f docs/projects/data-manager/index.md ]; then
            perl -0777 -pe 's/\((\s*)frontend\/README\.md\)/(\1frontend\/index.md)/g; s/\((\s*)backend\/README\.md\)/(\1backend\/index.md)/g' -i docs/projects/data-manager/index.md
          fi
          # If backend docs link to documentation/main.md but only index.md exists, rewrite it.
          if [ -f docs/projects/data-manager/backend/documentation/index.md ] && [ ! -f docs/projects/data-manager/backend/documentation/main.md ]; then
            find docs/projects/data-manager/backend -type f -name '*.md' -print0 \
              | xargs -0 perl -0777 -pe 's/\((\s*)documentation\/main\.md\)/(\1documentation\/index.md)/g' -i
          fi

      - name: Show docs tree (debug)
        run: |
          echo "::group::docs/"
          ls -laR docs | sed -n '1,200p'
          echo "::endgroup::"

      - name: Build MkDocs (strict)
        run: uv run mkdocs build --strict

      - name: List site (debug)
        run: |
          echo "::group::site/"
          ls -la site | sed -n '1,200p'
          echo "::endgroup::"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ inputs.publish_dir }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
