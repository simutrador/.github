name: Reusable â€¢ Build & Deploy MkDocs to Pages

on:
  workflow_call:
    inputs:
      python_version:
        type: string
        default: "3.12"
      publish_dir:
        type: string
        default: "site"
      # CSV: repo:path_in_repo:dest_subdir (e.g. "simutrador-data-manager:docs:data-manager")
      aggregate_docs:
        type: string
        default: ""
    secrets:
      # Optional org/user PAT with repo read, only needed if GITHUB_TOKEN can't read source repos
      GH_TOKEN:
        required: false

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout caller repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v3

      - name: Install deps
        run: uv sync

      - name: Aggregate docs from other repos (optional)
        if: ${{ inputs.aggregate_docs != '' }}
        env:
          AGG: ${{ inputs.aggregate_docs }}
          ORG: ${{ github.repository_owner }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          mkdir -p docs/projects _external
          IFS=',' read -ra ITEMS <<< "$AGG"
          for item in "${ITEMS[@]}"; do
            # item format: repo:path_in_repo:dest_under_docs/projects
            REPO="${item%%:*}"
            REST="${item#*:}"
            SRC="${REST%%:*}"
            DEST_SUB="${REST#*:}"

            SRC_BASENAME="$(basename "$SRC")"
            DEST_DIR="docs/projects/${DEST_SUB}"

            echo "::group::Clone and copy: $REPO | $SRC -> $DEST_DIR"
            mkdir -p "_external/$REPO" "$DEST_DIR"

            # Clone lightweight
            if [ ! -d "_external/$REPO/.git" ]; then
              gh repo clone "$ORG/$REPO" "_external/$REPO" -- --depth 1
            fi

            if [ -d "_external/$REPO/$SRC" ]; then
              # SRC is a directory -> mirror into DEST_DIR/
              rsync -a --delete "_external/$REPO/$SRC/" "$DEST_DIR/"
            elif [ -f "_external/$REPO/$SRC" ]; then
              # SRC is a single file -> copy into DEST_DIR/
              cp "_external/$REPO/$SRC" "$DEST_DIR/"
              # If we just copied a README.md and there's no index.md yet, rename to index.md
              if [ "$SRC_BASENAME" = "README.md" ] && [ ! -f "$DEST_DIR/index.md" ]; then
                mv "$DEST_DIR/README.md" "$DEST_DIR/index.md"
              fi
            else
              echo "WARN: path '$SRC' not found in $REPO" >&2
            fi

            echo "Resulting files in $DEST_DIR:"
            ls -la "$DEST_DIR" || true
            echo "::endgroup::"
          done

      - name: Show docs tree (debug)
        run: |
          echo "::group::docs/"
          ls -laR docs | sed -n '1,200p'
          echo "::endgroup::"

      - name: Build MkDocs (strict)
        run: uv run mkdocs build --strict

      - name: List site (debug)
        run: |
          echo "::group::site/"
          ls -la site | sed -n '1,200p'
          echo "::endgroup::"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ inputs.publish_dir }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
