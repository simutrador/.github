name: Reusable • Build & Deploy MkDocs to Pages

on:
  workflow_call:
    inputs:
      python_version:
        type: string
        default: "3.12"
      publish_dir:
        type: string
        default: "site"
      # CSV items: repo:path_in_repo:dest_under_docs
      # example: "simutrador-data-manager:docs:data-manager/docs"
      aggregate_docs:
        type: string
        default: ""
    secrets:
      # Optional PAT with repo read; only needed if GITHUB_TOKEN can't read source repos
      GH_TOKEN:
        required: false

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout caller repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v3

      - name: Install deps
        run: uv sync

      - name: Aggregate docs from other repos (optional)
        if: ${{ inputs.aggregate_docs != '' }}
        env:
          AGG: ${{ inputs.aggregate_docs }}
          ORG: ${{ github.repository_owner }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          mkdir -p docs _external
          IFS=',' read -ra ITEMS <<< "$AGG"
          for item in "${ITEMS[@]}"; do
            item="$(echo "$item" | xargs)"  # trim spaces

            # Split: repo : src : dest_under_docs
            REPO_RAW="${item%%:*}"; REST="${item#*:}"
            SRC_RAW="${REST%%:*}";  DEST_SUB_RAW="${REST#*:}"
            REPO="$(echo "$REPO_RAW" | xargs)"
            SRC="$(echo "$SRC_RAW" | xargs)"
            DEST_SUB="$(echo "$DEST_SUB_RAW" | xargs)"

            DEST_DIR="docs/${DEST_SUB}"
            echo "::group::Clone and copy: $REPO | $SRC -> $DEST_DIR"
            mkdir -p "_external/$REPO" "$DEST_DIR"

            # Clone once
            if [ ! -d "_external/$REPO/.git" ]; then
              gh repo clone "$ORG/$REPO" "_external/$REPO" -- --depth 1
            fi

            if [ -d "_external/$REPO/$SRC" ]; then
              # Directory -> mirror into DEST_DIR/
              rsync -a --delete "_external/$REPO/$SRC/" "$DEST_DIR/"
            elif [ -f "_external/$REPO/$SRC" ]; then
              # Single file -> copy into DEST_DIR/
              cp "_external/$REPO/$SRC" "$DEST_DIR/"
              # README -> index for section landing pages
              if [ "$(basename "$SRC")" = "README.md" ] && [ ! -f "$DEST_DIR/index.md" ]; then
                mv "$DEST_DIR/README.md" "$DEST_DIR/index.md"
              fi
            else
              echo "WARN: path '$SRC' not found in $REPO" >&2
            fi

            echo "Resulting files in $DEST_DIR:"
            ls -la "$DEST_DIR" || true
            echo "::endgroup::"
          done

      # --- Normalization passes so MkDocs --strict finds targets ---

      - name: Make directories linkable (README → index.md everywhere)
        run: |
          set -euo pipefail
          shopt -s nullglob
          while IFS= read -r -d '' f; do
            d="$(dirname "$f")"
            if [ -f "$d/index.md" ]; then
              # index.md already exists; remove duplicate README.md to avoid conflicts
              rm -f "$f"
              echo "Removed duplicate: $f (index.md already present)"
            else
              mv "$f" "$d/index.md"
              echo "Renamed: $f -> $d/index.md"
            fi
          done < <(find docs -type f -name 'README.md' -print0)

      - name: Rewrite common link patterns
        run: |
          set -euo pipefail
          shopt -s nullglob
          # 1) Any .../README.md links -> .../index.md (generic)
          find docs -type f -name '*.md' -print0 \
            | xargs -0 perl -0777 -pe 's/\((\s*)([^)]+?)README\.md\)/(\1\2index.md)/g' -i

      - name: Fix links inside aggregated /docs subtrees
        run: |
          set -euo pipefail
          shopt -s nullglob
          # For each top-level section that has its own docs/ subtree (e.g., docs/data-manager/docs)
          for DOCS_DIR in docs/*/docs; do
            [ -d "$DOCS_DIR" ] || continue
            # 1) Strip leading 'docs/' in links when already under /docs
            find "$DOCS_DIR" -type f -name '*.md' -print0 \
              | xargs -0 perl -0777 -pe 's/\((\s*)docs\//\(\1/g' -i
          done

      - name: Show docs tree (debug)
        run: |
          echo "::group::docs/"
          ls -laR docs | sed -n '1,300p'
          echo "::endgroup::"

      - name: Build MkDocs (strict)
        run: uv run mkdocs build --strict

      - name: List site (debug)
        run: |
          echo "::group::site/"
          ls -la site | sed -n '1,200p'
          echo "::endgroup::"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ inputs.publish_dir }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
