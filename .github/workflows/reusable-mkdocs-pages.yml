# .github/workflows/reusable-mkdocs-pages.yml
name: Reusable • Build & Deploy MkDocs to Pages

on:
  workflow_call:
    inputs:
      python_version:
        type: string
        default: "3.12"
      publish_dir:
        type: string
        default: "site"
      # CSV items: repo:path_in_repo:dest_under_docs
      # example: "simutrador-data-manager:docs:data-manager/docs,simutrador-core:README.md:core"
      aggregate_docs:
        type: string
        default: ""
    secrets:
      # Optional personal access tokens (fine-grained or classic).
      # Caller must pass one explicitly or use `secrets: inherit`.
      SIMU_TOKEN:
        required: false
      GH_TOKEN:
        required: false

# GITHUB_TOKEN perms kept minimal; PAT will be used for cross-repo reads
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout caller repo
        uses: actions/checkout@v4
        # uses the caller job's GITHUB_TOKEN, which is fine for the caller repo

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v3

      - name: Install deps
        run: uv sync

      - name: Aggregate docs from other repos (optional)
        if: ${{ inputs.aggregate_docs != '' }}
        env:
          AGG: ${{ inputs.aggregate_docs }}
          ORG: ${{ github.repository_owner }}
          # pass through secrets (may be empty)
          SIMU_TOKEN: ${{ secrets.SIMU_TOKEN }}
          GH_TOKEN_IN: ${{ secrets.GH_TOKEN }}
          GITHUB_TOKEN_IN: ${{ github.token }}
        run: |
          set -euo pipefail

          # ------------------------------
          # Select auth token (PAT > GH_TOKEN > job GITHUB_TOKEN)
          # Force gh to use our selection by UNSETTING GITHUB_TOKEN when PAT present.
          # ------------------------------
          if [ -n "${SIMU_TOKEN:-}" ]; then
            unset GITHUB_TOKEN
            export GH_TOKEN="${SIMU_TOKEN}"
            SEL_TOKEN="SIMU_TOKEN"
          elif [ -n "${GH_TOKEN_IN:-}" ]; then
            unset GITHUB_TOKEN
            export GH_TOKEN="${GH_TOKEN_IN}"
            SEL_TOKEN="GH_TOKEN"
          else
            # final fallback to the job's default token
            export GH_TOKEN="${GITHUB_TOKEN_IN:-}"
            export GITHUB_TOKEN="${GITHUB_TOKEN_IN:-}"
            SEL_TOKEN="GITHUB_TOKEN"
          fi
          echo "Using auth via ${SEL_TOKEN}"

          mkdir -p docs _external
          IFS=',' read -ra ITEMS <<< "$AGG"

          for raw in "${ITEMS[@]}"; do
            item="$(echo "$raw" | xargs)"  # trim
            [ -z "$item" ] && continue

            # Split "repo:path:dest"
            REPO="${item%%:*}"; REST="${item#*:}"
            SRC="${REST%%:*}";  DEST_SUB="${REST#*:}"

            # Normalize FULL_REPO org/name
            FULL_REPO="$REPO"
            if [[ "$REPO" != */* ]]; then
              FULL_REPO="$ORG/$REPO"
            fi

            DEST_DIR="docs/${DEST_SUB}"
            echo "::group::Clone and copy: $FULL_REPO | $SRC -> $DEST_DIR"
            mkdir -p "_external/$REPO" "$DEST_DIR"

            # Clone once (prefer gh; fallback to git with header auth using GH_TOKEN)
            if [ ! -d "_external/$REPO/.git" ]; then
              if command -v gh >/dev/null 2>&1; then
                if ! GH_TOKEN="$GH_TOKEN" gh repo clone "$FULL_REPO" "_external/$REPO" -- --depth 1; then
                  echo "gh clone failed; falling back to git with header auth"
                  git clone --depth 1 "https://x-access-token:${GH_TOKEN}@github.com/${FULL_REPO}.git" "_external/$REPO"
                fi
              else
                echo "gh not found; using git with header auth"
                git clone --depth 1 "https://x-access-token:${GH_TOKEN}@github.com/${FULL_REPO}.git" "_external/$REPO"
              fi
            fi

            if [ -d "_external/$REPO/$SRC" ]; then
              rsync -a --delete "_external/$REPO/$SRC/" "$DEST_DIR/"
            elif [ -f "_external/$REPO/$SRC" ]; then
              mkdir -p "$DEST_DIR"
              cp "_external/$REPO/$SRC" "$DEST_DIR/"
              if [ "$(basename "$SRC")" = "README.md" ] && [ ! -f "$DEST_DIR/index.md" ]; then
                mv "$DEST_DIR/README.md" "$DEST_DIR/index.md"
              fi
            else
              echo "WARN: path '$SRC' not found in $FULL_REPO" >&2
            fi

            echo "Resulting files in $DEST_DIR:"
            ls -la "$DEST_DIR" || true
            echo "::endgroup::"
          done

      # --- Normalization passes so MkDocs --strict finds targets ---

      - name: Make directories linkable (README → index.md everywhere)
        run: |
          set -euo pipefail
          shopt -s nullglob
          while IFS= read -r -d '' f; do
            d="$(dirname "$f")"
            if [ -f "$d/index.md" ]; then
              rm -f "$f"
              echo "Removed duplicate: $f (index.md already present)"
            else
              mv "$f" "$d/index.md"
              echo "Renamed: $f -> $d/index.md"
            fi
          done < <(find docs -type f -name 'README.md' -print0)

      - name: Rewrite common link patterns
        run: |
          set -euo pipefail
          find docs -type f -name '*.md' -print0 \
            | xargs -0 perl -0777 -pe 's/\((\s*)([^)]+?)README\.md\)/(\1\2index.md)/g' -i

      - name: Fix links inside aggregated /docs subtrees
        run: |
          set -euo pipefail
          for DOCS_DIR in docs/*/docs; do
            [ -d "$DOCS_DIR" ] || continue
            find "$DOCS_DIR" -type f -name '*.md' -print0 \
              | xargs -0 perl -0777 -pe 's/\((\s*)docs\//\(\1/g' -i
          done

      - name: Show docs tree (debug)
        run: |
          echo "::group::docs/"
          ls -laR docs | sed -n '1,300p'
          echo "::endgroup::"

      - name: Build MkDocs (strict)
        run: uv run mkdocs build --strict

      - name: List site (debug)
        run: |
          echo "::group::site/"
          ls -la "${{ inputs.publish_dir }}" | sed -n '1,200p'
          echo "::endgroup::"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ inputs.publish_dir }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
